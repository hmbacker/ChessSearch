{"version":3,"sources":["media/chess_pieces.svg","loading.svg","actions/action-types.js","actions/index.js","reducers/searchResultsReducer.js","reducers/gameReducer.js","reducers/commentsReducer.js","reducers/index.js","store.js","components/searchbox/SearchBox.jsx","components/resultbox/ResultRow.jsx","components/resultbox/ResultHeaderCell.jsx","components/resultbox/ResultBox.jsx","components/advancedview/Graph.jsx","components/searchpage/SearchPage.jsx","components/commentBox/CommentList.jsx","components/commentBox/CommentEntry.jsx","components/commentBox/CommentBox.jsx","components/gamepage/GamePage.jsx","components/errorpage/ErrorPage.jsx","App.js","serviceWorker.js","index.js","media/search.svg"],"names":["module","exports","FETCH_SEARCH_RESULTS","FETCH_GAME","FETCH_MORE_SEARCH_RESULTS","FETCH_COMMENTS","POST_COMMENT","REQUEST","FAILURE","SUCCESS","fetchSearchResults","paramObject","type","status","paramObjectToParamString","playerw","playerb","ignorecolors","winner","datemin","datemax","ratingmin","ratingmax","eco","turnmin","turnmax","orderby","descending","offset","limit","makeFetchRequest","paramString","more","fetch","then","response","ok","json","Error","statusText","store","dispatch","results","fetchMoreSearchResultsSuccess","catch","error","fetchMoreSearchResultsFailure","fetchSearchResultsFailure","searchResultsReducer","state","isFetching","mostRecentCall","action","Object","assign","fetchParamObject","mostRecentParamObject","resultsParamObject","resultsComplete","graphData","mostRecentQuery","concat","gameReducer","id","data","e","fetchGameFailure","gameId","comments","fetchCommentsFailure","makePostRequest","comment","method","headers","Headers","body","JSON","stringify","postCommentFailure","commentsReducer","isPosting","mostRecentGameId","fetchGameId","commentsGameId","rootReducer","combineReducers","searchResults","game","createStore","connect","props","useState","ignoreColors","setIgnoreColors","handleWinnerChange","event","checkboxId","target","checked","document","getElementById","className","onSubmit","preventDefault","formData","FormData","get","htmlFor","name","placeholder","onClick","ResultRow","time","Date","last_move_at","key","white_id","white_rating","black_id","black_rating","turns","opening_eco","increment_code","toLocaleTimeString","hour12","toLocaleDateString","to","ResultHeaderCell","title","fieldName","handleHeaderClick","text","ResultBox","bind","handleScroll","headerField","keys","this","length","root","documentElement","window","innerHeight","scrollY","scrollHeight","fetchMoreSearchResults","addEventListener","map","tuple","colSpan","src","loadingSvg","alt","Component","undefined","domainPadding","x","padding","left","right","bottom","top","height","standalone","y","textAnchor","style","fill","label","axisLabel","tickLabels","fixLabelOverlap","dependentAxis","axisLabelComponent","SearchPage","chess_pieces","href","rel","CommentList","index","CommentID","DateTime","toLocaleString","Comment","CommentEntry","postComment","reset","form","rows","cols","CommentBox","fetchComments","ownProps","match","fetchGame","params","created_at","moves","opening_name","opening_ply","rated","victory_status","start_time","end_time","duration","isWinner","color","move_list","split","newMoveList","i","push","toString","search","Math","round","move","GamePageError","knight","App","exact","path","component","GamePage","ErrorPage","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2833c1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chess_pieces.2c242c73.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.33aa6267.svg\";","// Contains constants for all action types\n\nexport const FETCH_SEARCH_RESULTS = \"FETCH_SEARCH_RESULTS\";\nexport const FETCH_GAME = \"FETCH_GAME\";\nexport const FETCH_MORE_SEARCH_RESULTS = \"FETCH_MORE_SEARCH_RESULTS\";\nexport const FETCH_COMMENTS = \"FETCH_COMMENTS\";\nexport const POST_COMMENT = \"POST_COMMENT\";\nexport const REQUEST = \"REQUEST\";\nexport const FAILURE = \"FAILURE\";\nexport const SUCCESS = \"SUCCESS\";","// Main action generator file\n\nimport {\n  FETCH_SEARCH_RESULTS,\n  FETCH_MORE_SEARCH_RESULTS,\n  FETCH_COMMENTS,\n  POST_COMMENT,\n  FETCH_GAME,\n  REQUEST,\n  FAILURE,\n  SUCCESS\n} from \"./action-types\";\n\n// fetchSearchResults: retrieve a new set of results from the server, given the search parameters in paramObject\n// Make request\nexport function fetchSearchResults(paramObject) {\n  return {\n    type: FETCH_SEARCH_RESULTS,\n    paramObject: paramObject,\n    status: REQUEST\n  };\n}\n\n// Request failure\nexport function fetchSearchResultsFailure(error) {\n  return {\n    type: FETCH_SEARCH_RESULTS,\n    status: FAILURE,\n    error: error\n  };\n}\n\n// Request success\nexport function fetchSearchResultsSuccess(results) {\n  return {\n    type: FETCH_SEARCH_RESULTS,\n    status: SUCCESS,\n    results: results\n  };\n}\n\n// fetchMoreSearchResults: fetch the next [limit] results for the current search and add them to our results\n// Make request\nexport function fetchMoreSearchResults(limit) {\n  return {\n    type: FETCH_MORE_SEARCH_RESULTS,\n    status: REQUEST,\n    limit: limit\n  };\n}\n\n// Request failure\nexport function fetchMoreSearchResultsFailure(error) {\n  return {\n    type: FETCH_MORE_SEARCH_RESULTS,\n    status: FAILURE,\n    error: error\n  };\n}\n\n// Request success\nexport function fetchMoreSearchResultsSuccess(results) {\n  return {\n    type: FETCH_MORE_SEARCH_RESULTS,\n    status: SUCCESS,\n    results: results\n  };\n}\n\n// fetchComments: load the comments for a given game\n// Make request\nexport function fetchComments(gameId) {\n  return {\n    type: FETCH_COMMENTS,\n    status: REQUEST,\n    gameId: gameId\n  };\n}\n\nexport function fetchCommentsFailure(error) {\n  return {\n    type: FETCH_COMMENTS,\n    status: FAILURE,\n    error: error\n  };\n}\n\nexport function fetchCommentsSuccess(comments) {\n  return {\n    type: FETCH_COMMENTS,\n    status: SUCCESS,\n    comments: comments\n  };\n}\n\n// postComment: add a comment to a game's comment section\n// Make request\nexport function postComment(gameId, comment) {\n  return {\n    type: POST_COMMENT,\n    status: REQUEST,\n    gameId: gameId,\n    comment: comment\n  };\n}\n\n// Request failure\nexport function postCommentFailure(error) {\n  return {\n    type: POST_COMMENT,\n    status: FAILURE,\n    error: error\n  };\n}\n\n// Request success\nexport function postCommentSuccess() {\n  return {\n    type: POST_COMMENT,\n    status: SUCCESS\n  };\n}\n\n// fetchGame: fetch the data of the game with the given id\n// Make request\nexport function fetchGame(id) {\n  return {\n    type: FETCH_GAME,\n    status: REQUEST,\n    id: id\n  };\n}\n\n// Request failure\nexport function fetchGameFailure(error) {\n  return {\n    type: FETCH_GAME,\n    status: FAILURE,\n    error: error\n  };\n}\n\n// Request success\nexport function fetchGameSuccess(data) {\n  return {\n    type: FETCH_GAME,\n    status: SUCCESS,\n    data: data\n  };\n}\n","import {\n  FETCH_SEARCH_RESULTS,\n  FETCH_MORE_SEARCH_RESULTS,\n  REQUEST,\n  FAILURE,\n  SUCCESS\n} from \"../actions/action-types\";\nimport {\n  fetchSearchResultsFailure,\n  fetchSearchResultsSuccess,\n  fetchMoreSearchResultsFailure,\n  fetchMoreSearchResultsSuccess\n} from \"../actions/index\";\nimport store from \"../store\";\n\nfunction paramObjectToParamString(paramObject) {\n  return (\n    \"?playerw=\" +\n    paramObject.playerw +\n    \"&playerb=\" +\n    paramObject.playerb +\n    \"&ignorecolors=\" +\n    paramObject.ignorecolors +\n    \"&winner=\" +\n    paramObject.winner +\n    \"&datemin=\" +\n    paramObject.datemin +\n    \"&datemax=\" +\n    paramObject.datemax +\n    \"&ratingmin=\" +\n    paramObject.ratingmin +\n    \"&ratingmax=\" +\n    paramObject.ratingmax +\n    \"&eco=\" +\n    paramObject.eco +\n    \"&turnmin=\" +\n    paramObject.turnmin +\n    \"&turnmax=\" +\n    paramObject.turnmax +\n    \"&orderby=\" +\n    paramObject.orderby +\n    \"&descending=\" +\n    paramObject.descending +\n    \"&offset=\" +\n    paramObject.offset +\n    \"&limit=\" +\n    paramObject.limit\n  );\n}\n\nfunction makeFetchRequest(paramString, more = false) {\n  fetch(\"http://it2810-55.idi.ntnu.no:3001/prosjekt3/api/games\" + paramString)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response.statusText);\n      }\n    })\n    .then(json => {\n      if (!more) {\n        store.dispatch(fetchSearchResultsSuccess(json));\n      } else {\n        store.dispatch(fetchMoreSearchResultsSuccess(json));\n      }\n    })\n    .catch(error => {\n      if (!more) {\n        store.dispatch(fetchSearchResultsFailure(error));\n      } else {\n        store.dispatch(fetchMoreSearchResultsFailure(error));\n      }\n    });\n}\n\nfunction searchResultsReducer(\n  state = { results: [], isFetching: false, mostRecentCall: null },\n  action\n) {\n  if (action.type === FETCH_SEARCH_RESULTS) {\n    if (action.status === REQUEST) {\n      // Fetch results if we are not in the middle of another request\n      if (!state.isFetching) {\n        const paramString = paramObjectToParamString(action.paramObject);\n        makeFetchRequest(paramString);\n        return Object.assign({}, state, {\n          isFetching: true,\n          fetchParamObject: action.paramObject,\n          mostRecentParamObject: action.paramObject,\n          error: \"\"\n        });\n      } else if (action.paramObject !== state.fetchParamObject) {\n        // If we are already handling a fetch request, and this call wants a different set of data:\n        // Remember the call so we can make the fetch later\n        return Object.assign({}, state, {\n          mostRecentParamObject: action.paramObject\n        });\n      }\n    } else if (action.status === FAILURE) {\n      if (state.isFetching) {\n        return Object.assign({}, state, {\n          isFetching: false,\n          fetchParamObject: null,\n          error: action.error\n        });\n      }\n    } else if (action.status === SUCCESS) {\n      if (state.isFetching) {\n        if (\n          paramObjectToParamString(state.mostRecentParamObject) ===\n          paramObjectToParamString(state.fetchParamObject)\n        ) {\n          // If no other calls for new searches have been made during the request, add results to state\n          return Object.assign({}, state, {\n            results: action.results[0],\n            resultsParamObject: state.fetchParamObject,\n            fetchParamObject: null,\n            isFetching: false,\n            resultsComplete: false,\n            error: \"\",\n            graphData: action.results[1]\n          });\n        } else {\n          // If the received data does not match the most recently requested data:\n          // Do not update results, instead make a new call for the new data set\n          makeFetchRequest(\n            paramObjectToParamString(state.mostRecentParamObject)\n          );\n          return Object.assign({}, state, {\n            fetchParamObject: state.mostRecentParamObject\n          });\n        }\n      }\n    }\n  } else if (action.type === FETCH_MORE_SEARCH_RESULTS) {\n    if (action.status === REQUEST) {\n      if (\n        // Fetch the next chunk of results if\n        !state.isFetching && // - we are not processing another request\n        state.resultsParamObject && // - we have a search request to retrieve more results for\n        !state.resultsComplete // - we have not already retrieved all results\n      ) {\n        const paramObject = Object.assign({}, state.resultsParamObject);\n        paramObject.offset += paramObject.limit;\n        paramObject.limit = action.limit;\n        const paramString = paramObjectToParamString(paramObject);\n        makeFetchRequest(paramString, true);\n        return Object.assign({}, state, {\n          isFetching: true,\n          fetchParamObject: paramObject,\n          mostRecentParamObject: paramObject,\n          mostRecentQuery: paramString,\n          error: \"\"\n        });\n      }\n    } else if (action.status === FAILURE) {\n      if (state.isFetching) {\n        return Object.assign({}, state, {\n          isFetching: false,\n          fetchParamObject: null,\n          error: action.error\n        });\n      }\n    } else if (action.status === SUCCESS) {\n      if (state.isFetching) {\n        if (\n          paramObjectToParamString(state.mostRecentParamObject) ===\n          paramObjectToParamString(state.fetchParamObject)\n        ) {\n          // If no other calls for new searches have been made during the request, add results to state\n          return Object.assign({}, state, {\n            results: state.results.concat(action.results[0]),\n            resultsParamObject: state.fetchParamObject,\n            fetchParamObject: null,\n            isFetching: false,\n            resultsComplete: action.results[0] < state.fetchParamObject.limit, // If we received less results than we requested, we have received all results\n            error: \"\"\n          });\n        }\n      }\n    }\n  }\n  return state;\n}\n\nexport default searchResultsReducer;\n","import {\n  FETCH_GAME,\n  REQUEST,\n  FAILURE,\n  SUCCESS\n} from \"../actions/action-types\";\nimport {\n  fetchGameSuccess,\n  fetchGameFailure\n} from \"../actions/index\";\nimport store from \"../store\";\n\nfunction gameReducer(state = { isFetching: false }, action) {\n  if (action.type === FETCH_GAME) {\n    if (action.status === REQUEST) {\n      if (!state.isFetching) {\n        // Fetch game if we are not in the middle of another request\n        fetch(\"http://it2810-55.idi.ntnu.no:3001/prosjekt3/api/games/\" + action.id)\n          .then(response => {\n            if (response.ok) {\n              return response.json();\n            } else {\n              throw new Error(response.statusText);\n            }\n          })\n          .then(json => {\n            try {\n              store.dispatch(fetchGameSuccess(json[0]));\n            } catch (e) {\n            }\n          })\n          .catch(error => {\n            store.dispatch(fetchGameFailure(error));\n          });\n\n        return Object.assign({}, state, {\n          isFetching: true,\n          id: action.id,\n          error: \"\"\n        });\n      }\n    } else if (action.status === FAILURE) {\n      if (state.isFetching) {\n        return Object.assign({}, state, {\n          isFetching: false,\n          id: null,\n          error: action.error\n        });\n      }\n    } else if (action.status === SUCCESS) {\n      if (state.isFetching) {\n        return Object.assign({}, state, {\n          data: action.data,\n          isFetching: false,\n          id: action.id,\n          error: \"\"\n        });\n      }\n    }\n  }\n  return state;\n}\n\nexport default gameReducer;","import {\n  FETCH_COMMENTS,\n  POST_COMMENT,\n  REQUEST,\n  FAILURE,\n  SUCCESS\n} from \"../actions/action-types\";\nimport {\n  fetchCommentsFailure,\n  fetchCommentsSuccess,\n  postCommentSuccess,\n  postCommentFailure\n} from \"../actions/index\";\nimport store from \"../store\";\n\nfunction makeFetchRequest(gameId) {\n  fetch(\"http://it2810-55.idi.ntnu.no:3001/prosjekt3/api/games/\" + gameId + \"/comments\")\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response.statusText);\n      }\n    })\n    .then(json => {\n      store.dispatch(fetchCommentsSuccess(json));\n    })\n    .catch(error => {\n      store.dispatch(fetchCommentsFailure(error));\n    });\n}\n\nfunction makePostRequest(gameId, comment) {\n  fetch(\"http://it2810-55.idi.ntnu.no:3001/prosjekt3/api/games/\" + gameId + \"/create\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify({\n      comment: comment\n    })\n  })\n    .then(response => {\n      if (response.ok) {\n        store.dispatch(postCommentSuccess());\n      } else {\n        throw new Error(response.statusText);\n      }\n    })\n    .catch(error => {\n      store.dispatch(postCommentFailure(error));\n    });\n}\n\nfunction commentsReducer(\n  state = {\n    isFetching: false,\n    isPosting: false,\n    comments: [],\n    mostRecentGameId: null\n  },\n  action\n) {\n  if (action.type === FETCH_COMMENTS) {\n    if (action.status === REQUEST) {\n      if (!state.isFetching) {\n        // Only fetch comments if we aren't already fetching\n        makeFetchRequest(action.gameId);\n        return Object.assign({}, state, {\n          isFetching: true,\n          fetchGameId: action.gameId,\n          mostRecentGameId: action.gameId,\n          error: \"\"\n        });\n      } else if (action.gameId !== state.fetchGameId) {\n        // \"Queue up\" the request if we are already fetching something else\n        return Object.assign({}, state, {\n          mostRecentGameId: action.gameId\n        });\n      }\n    } else if (action.status === FAILURE) {\n      if (state.isFetching) {\n        // Fetch failure: stop\n        return Object.assign({}, state, {\n          isFetching: false,\n          fetchGameId: null,\n          error: action.error\n        });\n      }\n    } else if (action.status === SUCCESS) {\n      if (state.isFetching) {\n        if (state.fetchGameId === state.mostRecentGameId) {\n          // Write comments to state if they are the comments we requested\n          return Object.assign({}, state, {\n            isFetching: false,\n            comments: action.comments,\n            commentsGameId: state.fetchGameId,\n            fetchGameId: null,\n            error: \"\"\n          });\n        } else {\n          // Make a new fetch request for the new comments we want\n          makeFetchRequest(state.mostRecentGameId);\n          return Object.assign({}, state, {\n            fetchGameId: state.mostRecentGameId\n          });\n        }\n      }\n    }\n  } else if (action.type === POST_COMMENT) {\n    if (action.status === REQUEST) {\n      if (!state.isPosting && !state.isFetching) {\n        // You can only post a comment if you are not already in the middle of a request\n        makePostRequest(action.gameId, action.comment);\n        return Object.assign({}, state, {\n          isPosting: true,\n          error: \"\"\n        });\n      }\n    } else if (action.status === FAILURE) {\n      if (state.isPosting) {\n        return Object.assign({}, state, {\n          isPosting: false,\n          error: action.error\n        });\n      }\n    } else if (action.status === SUCCESS) {\n      if (state.isPosting) {\n        // Reload comments after posting a comment\n        makeFetchRequest(state.commentsGameId);\n        return Object.assign({}, state, {\n          isPosting: false,\n          isFetching: true,\n          mostRecentGameId: state.commentsGameId,\n          error: \"\"\n        })\n      }\n    }\n  }\n  return state;\n}\n\nexport default commentsReducer;\n","// Root reducer\n\nimport { combineReducers } from \"redux\";\nimport searchResultsReducer from \"./searchResultsReducer\";\nimport gameReducer from \"./gameReducer\";\nimport commentsReducer from \"./commentsReducer\";\n\nconst rootReducer = combineReducers({\n  searchResults: searchResultsReducer,\n  game: gameReducer,\n  comments: commentsReducer\n});\n\nexport default rootReducer;","// This is the store! We likely will not have to change this file throughout the whole project :)\n\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React, { useState } from \"react\";\nimport { fetchSearchResults } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport \"./SearchBox.css\";\n\nfunction SearchBox(props) {\n  // Adapt UI labels to meaningful names, depending on if \"Ignore colors\" is checked or not.\n  const [ignoreColors, setIgnoreColors] = useState(false);\n  function handleICChange(event) {\n    setIgnoreColors(event.target.checked);\n  }\n\n  // Ensure only 0 or 1 winner results can be checked\n  function handleWinnerChange(event) {\n    const checkboxId = event.target.id;\n    if (event.target.checked) {\n      if (checkboxId !== \"whitewin\") {\n        document.getElementById(\"whitewin\").checked = false;\n      }\n      if (checkboxId !== \"blackwin\") {\n        document.getElementById(\"blackwin\").checked = false;\n      }\n      if (checkboxId !== \"draw\") {\n        document.getElementById(\"draw\").checked = false;\n      }\n    }\n  }\n\n  function handleSubmit(event) {\n    // On submit, start a search request with the given form data.\n    event.preventDefault();\n    const formData = new FormData(event.target);\n  \n    let winner = \"\";\n    if (formData.get(\"whitewin\") === \"on\") {\n      winner = \"w\";\n    } else if (formData.get(\"blackwin\") === \"on\") {\n      winner = \"b\";\n    } else if (formData.get(\"draw\") === \"on\") {\n      winner = \"d\";\n    }\n  \n    const paramObject = {\n      playerw: formData.get(\"whiteplayername\"),\n      playerb: formData.get(\"blackplayername\"),\n      ignorecolors: formData.get(\"ignorecolors\") === \"on\" ? true : false,\n      winner: winner,\n      datemin: formData.get(\"fromdate\"),\n      datemax: formData.get(\"todate\"),\n      ratingmin: formData.get(\"minrating\"),\n      ratingmax: formData.get(\"maxrating\"),\n      eco: formData.get(\"openingecocode\"),\n      turnmin: formData.get(\"minturns\"),\n      turnmax: formData.get(\"maxturns\"),\n      orderby: \"id\",\n      descending: false,\n      offset: 0,\n      limit: 25\n    };\n    \n    props.fetchSearchResults(paramObject);\n  }\n\n  return (\n    <form className=\"search-box\" onSubmit={handleSubmit}>\n      <div className=\"fieldset-flexbox\">\n        <fieldset className=\"player\">\n          <legend>Player names</legend>\n          <div className=\"field-container\">\n            <label htmlFor=\"whiteplayername\">\n              {ignoreColors ? \"Player 1\" : \"White Player\"}\n            </label>\n            <input\n              type=\"text\"\n              name=\"whiteplayername\"\n              id=\"whiteplayername\"\n              placeholder=\"User ID\"\n            ></input>\n          </div>\n          <div className=\"field-container\">\n            <label htmlFor=\"blackplayername\">\n              {ignoreColors ? \"Player 2\" : \"Black Player\"}\n            </label>\n            <input\n              type=\"text\"\n              name=\"blackplayername\"\n              id=\"blackplayername\"\n              placeholder=\"User ID\"\n            ></input>\n          </div>\n          <div className=\"checkbox-container\">\n            <input\n              type=\"checkbox\"\n              name=\"ignorecolors\"\n              id=\"ignorecolors\"\n              onClick={handleICChange}\n            ></input>\n            <label htmlFor=\"ignorecolors\">Ignore colors</label>\n          </div>\n        </fieldset>\n        <fieldset className=\"victory\">\n          <legend>Winner</legend>\n          <div className=\"checkbox-container\">\n            <input\n              type=\"checkbox\"\n              name=\"whitewin\"\n              id=\"whitewin\"\n              onClick={handleWinnerChange}\n            ></input>\n            <label htmlFor=\"whitewin\">White</label>\n          </div>\n          <div className=\"checkbox-container\">\n            <input\n              type=\"checkbox\"\n              name=\"blackwin\"\n              id=\"blackwin\"\n              onClick={handleWinnerChange}\n            ></input>\n            <label htmlFor=\"blackwin\">Black</label>\n          </div>\n          <div className=\"checkbox-container\">\n            <input\n              type=\"checkbox\"\n              name=\"draw\"\n              id=\"draw\"\n              onClick={handleWinnerChange}\n            ></input>\n            <label htmlFor=\"draw\">Draw</label>\n          </div>\n        </fieldset>\n        <fieldset className=\"time\">\n          <legend>Game time range</legend>\n          <div className=\"field-container\">\n            <label htmlFor=\"fromdate\">From</label>\n            <input type=\"date\" name=\"fromdate\" id=\"fromdate\"></input>\n          </div>\n          <div className=\"field-container\">\n            <label htmlFor=\"todate\">To</label>\n            <input type=\"date\" name=\"todate\" id=\"todate\"></input>\n          </div>\n        </fieldset>\n        <fieldset className=\"ratings\">\n          <legend>Player ratings</legend>\n          <div className=\"field-container\">\n            <label htmlFor=\"minrating\">Min</label>\n            <input type=\"number\" name=\"minrating\" id=\"minrating\"></input>\n          </div>\n          <div className=\"field-container\">\n            <label htmlFor=\"maxrating\">Max</label>\n            <input type=\"number\" name=\"maxrating\" id=\"maxrating\"></input>\n          </div>\n        </fieldset>\n        <fieldset className=\"opening\">\n          <legend>Opening</legend>\n          <div className=\"field-container\">\n            <label htmlFor=\"openingecocode\">ECO code</label>\n            <input type=\"text\" name=\"openingecocode\" id=\"openingecode\"></input>\n          </div>\n        </fieldset>\n        <fieldset className=\"turns\">\n          <legend>Number of turns</legend>\n          <div className=\"field-container\">\n            <label htmlFor=\"minturns\">Min</label>\n            <input type=\"number\" name=\"minturns\" id=\"minturns\"></input>\n          </div>\n          <div className=\"field-container\">\n            <label htmlFor=\"maxturns\">Max</label>\n            <input type=\"number\" name=\"maxturns\" id=\"maxturns\"></input>\n          </div>\n        </fieldset>\n      </div>\n      <fieldset className=\"submit\">\n        <button type=\"submit\">Search</button>\n      </fieldset>\n    </form>\n  );\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return ({\n    fetchSearchResults: paramObject => dispatch(fetchSearchResults(paramObject))\n  });\n}\n\nexport default connect(null, mapDispatchToProps)(SearchBox);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction ResultRow({ game }) {\n  const time = new Date(game.last_move_at);\n  return (\n    <tr className=\"result-row\" key={game.id}>\n      <td className=\"white-player-cell\">{game.white_id}</td>\n      <td className=\"white-player-rating-cell\">{game.white_rating}</td>\n      <td className=\"black-player-cell\">{game.black_id}</td>\n      <td className=\"black-player-rating-cell\">{game.black_rating}</td>\n      <td className=\"winner-cell\">{game.winner}</td>\n      <td className=\"turns-cell\">{game.turns}</td>\n      <td className=\"opening-cell\">{game.opening_eco}</td>\n      <td className=\"increment-cell\">{game.increment_code}</td>\n      <td className=\"time-cell\">\n        {time.toLocaleTimeString(\"en-GB\", { hour12: false }) +\n          \" \" +\n          time.toLocaleDateString(\"en-GB\") /* To get dd-mm-yyyy format*/}\n      </td>\n      <td className=\"more-info-cell\">\n        <Link to={\"/game/\" + game.id}>Details →</Link>\n      </td>\n    </tr>\n  );\n}\n\nexport default ResultRow;\n","import React from \"react\";\n\nfunction ResultHeaderCell({\n  title,\n  fieldName,\n  paramObject,\n  handleHeaderClick\n}) {\n  let text = title;\n\n  // Show up/down triangle if the results are sorted by this field\n  if (fieldName === paramObject.orderby) {\n    text += \" \" + (paramObject.descending ? \"▾\" : \"▴\");\n  }\n\n  return (\n    <td\n      className=\"result-header-cell\"\n      onClick={() => handleHeaderClick(fieldName)}\n    >\n      {text}\n    </td>\n  );\n}\n\nexport default ResultHeaderCell;\n","import React, { Component } from \"react\";\nimport { fetchSearchResults, fetchMoreSearchResults } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport \"./ResultBox.css\";\nimport ResultRow from \"./ResultRow\";\nimport ResultHeaderCell from \"./ResultHeaderCell\";\nimport loadingSvg from \"../../loading.svg\";\n\nconst fetchMoreTriggerDistance = 150;\n\nclass ResultBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleHeaderClick = this.handleHeaderClick.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  handleHeaderClick(headerField) {\n    // Order by the field corresponding to the header clicked.\n    if (Object.keys(this.props.mostRecentParamObject).length === 0) {\n      // There is no \"most recent param object\", so we have no search to sort.\n      return;\n    }\n\n    const paramObject = Object.assign({}, this.props.mostRecentParamObject, {\n      offset: 0,\n      limit: 25\n    });\n\n    if (this.props.mostRecentParamObject.orderby === headerField) {\n      // Already ordered by headerField, so switch between ascending/descending\n      paramObject.descending = !paramObject.descending;\n    } else {\n      // Not already ordered by headerField, make it ordered by headerField and ascending\n      paramObject.orderby = headerField;\n      paramObject.descending = false;\n    }\n\n    // Fetch new results with this ordering\n    this.props.fetchSearchResults(paramObject);\n  }\n\n  handleScroll() {\n    // Fetch more search results if we have scrolled to the bottom of the screen\n    const root = document.documentElement;\n    if (\n      window.innerHeight + window.scrollY <\n      root.scrollHeight - fetchMoreTriggerDistance\n    ) {\n      return;\n    }\n    this.props.fetchMoreSearchResults(25);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  render() {\n    const titlesAndFieldNames = [\n      [\"White Player\", \"white_id\"],\n      [\"Rating\", \"white_rating\"],\n      [\"Black Player\", \"black_id\"],\n      [\"Rating\", \"black_rating\"],\n      [\"Winner\", \"winner\"],\n      [\"Turns\", \"turns\"],\n      [\"Opening\", \"opening_eco\"],\n      [\"Increment\", \"increment_code\"],\n      [\"Time\", \"last_move_at\"]\n    ];\n    return (\n      <table className=\"result-box\">\n        <thead className=\"result-box-header\">\n          <tr>\n            {titlesAndFieldNames.map(tuple => (\n              <ResultHeaderCell\n                key={tuple[1]}\n                title={tuple[0]}\n                fieldName={tuple[1]}\n                paramObject={this.props.mostRecentParamObject}\n                handleHeaderClick={this.handleHeaderClick}\n              />\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.results.map(game => {\n            return <ResultRow game={game} key={game.id} />;\n          })}\n          <tr>\n            <td className=\"loading-symbol-cell\" colSpan=\"10\">\n              {// If we are fetching data, show a spinny loading symbol\n              this.props.isFetching ? (\n                <img src={loadingSvg} alt=\"Loading\"></img>\n              ) : null}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.searchResults.isFetching,\n    mostRecentParamObject: Object.assign(\n      {},\n      state.searchResults.mostRecentParamObject\n    ),\n    results: state.searchResults.results\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchSearchResults: paramObject =>\n      dispatch(fetchSearchResults(paramObject)),\n    fetchMoreSearchResults: limit => dispatch(fetchMoreSearchResults(limit))\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ResultBox);\n","import React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryLabel } from \"victory\";\nimport { connect } from \"react-redux\";\n\nfunction Graph(props) {\n  // checks if graphData is empty\n  if (props.graphData === undefined) {\n    return <div></div>;\n  } else {\n    return (\n      // graph wrapper\n      <VictoryChart\n        domainPadding={{ x: 10 }}\n        padding={{ left: 100, right: 100, bottom: 50, top: 40 }}\n        height={150}\n        standalone={true}\n      >\n        <VictoryLabel\n          text=\"Distribution of player rankings\"\n          x={225}\n          y={30}\n          textAnchor=\"middle\"\n          style={{ fill: \"orange\" }}\n        />\n        <VictoryBar\n          style={{ data: { fill: \"#c43a31\" } }}\n          data={props.graphData}\n          x=\"Rating\"\n          y=\"sum(Instance)\"\n        />\n        <VictoryAxis\n          label=\"Rating\"\n          style={{\n            axisLabel: { fill: \"orange\" },\n            tickLabels: { fill: \"white\" }\n          }}\n          fixLabelOverlap\n        />\n        <VictoryAxis\n          dependentAxis\n          label=\"Instances\"\n          axisLabelComponent={<VictoryLabel x={50} />}\n          style={{\n            axisLabel: { fill: \"orange\" },\n            tickLabels: { fill: \"white\" }\n          }}\n          fixLabelOverlap\n        />\n      </VictoryChart>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    graphData: state.searchResults.graphData\n  };\n}\n\nexport default connect(mapStateToProps)(Graph);\n","import React from \"react\";\nimport \"./SearchPage.css\";\nimport chess_pieces from \"../../media/chess_pieces.svg\";\nimport SearchBox from \"../searchbox/SearchBox\";\nimport ResultBox from \"../resultbox/ResultBox\";\nimport Graph from '../advancedview/Graph'\n\nfunction SearchPage() {\n  return (\n    <div className=\"searchpage\">\n      <header className=\"searchpage-header\">\n        <h1>Chess Search</h1>\n      </header>\n      <section className=\"searchpage-section\">\n        <img\n          src={chess_pieces}\n          className=\"image-chess\"\n          alt=\"white chess knight\"\n        />\n        <SearchBox />\n        <Graph />\n        <ResultBox />\n      </section>\n      <footer className=\"searchpage-footer\">\n        <div>\n          Loading icon made by{\" \"}\n          <a\n            href=\"https://www.flaticon.com/authors/roundicons\"\n            title=\"Roundicons\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Roundicons\n          </a>{\" \"}\n          from{\" \"}\n          <a\n            href=\"https://www.flaticon.com/\"\n            title=\"Flaticon\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            www.flaticon.com\n          </a>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default SearchPage;\n","import React from \"react\";\n\nfunction CommentList({ comments }) {\n  return (\n    <div className=\"comment-list\">\n      {// Render every comment in comments\n      comments.map((comment, index) => {\n        return (\n          <div key={comment.CommentID}>\n            <h3 key={comment.CommentID + \"date\"}>\n              {new Date(comment.DateTime).toLocaleString(\"en-GB\", { hour12: false })}\n            </h3>\n            <p key={comment.CommentID + \"comment\"}>{comment.Comment}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default CommentList;\n","import React from \"react\";\n\nfunction CommentEntry({ gameId, isPosting, postComment }) {\n  function handleSubmit(event) {\n    // Post a comment\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const comment = formData.get(\"comment\");\n    if (comment !== \"\") { // Only post a comment if the textarea is not empty\n      postComment(gameId, formData.get(\"comment\"));\n      event.target.reset();\n    }\n  }\n\n  return (\n    <form className=\"comment-entry\" id=\"comment-entry\" onSubmit={handleSubmit}>\n      <legend>Comment Entry</legend>\n      <fieldset className=\"comment-textarea-fieldset\">\n        <textarea\n          className=\"comment-textarea\"\n          name=\"comment\"\n          form=\"comment-entry\"\n          rows=\"4\"\n          cols=\"50\"\n        ></textarea>\n      </fieldset>\n      <fieldset className=\"comment-submit-fieldset\">\n        <button className=\"comment-submit\" type=\"submit\">\n          Post comment\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n\nexport default CommentEntry;\n","import React, { Component } from \"react\";\nimport { fetchComments, postComment } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport CommentList from \"./CommentList\";\nimport CommentEntry from \"./CommentEntry\";\nimport \"./CommentBox.css\";\n\nclass CommentBox extends Component {\n  componentDidMount() {\n    this.props.fetchComments(this.props.gameId);\n  }\n\n  render() {\n    return (\n      <div className=\"comment-box\">\n        <CommentEntry\n          gameId={this.props.gameId}\n          postComment={this.props.postComment}\n        />\n        <CommentList comments={this.props.comments} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    comments: state.comments.comments,\n    gameId: ownProps.id\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchComments: gameId => dispatch(fetchComments(gameId)),\n    postComment: (gameId, comment) => dispatch(postComment(gameId, comment))\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentBox);\n","import React from \"react\";\nimport \"./GamePage.css\";\nimport search from \"../../media/search.svg\";\nimport { Link } from \"react-router-dom\";\nimport { fetchGame } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport CommentBox from \"../commentBox/CommentBox\";\n\nfunction GamePage({ game, match, fetchGame }) {\n  const {\n    params: { id }\n  } = match;\n  const empty_game = {\n    black_id: null,\n    black_rating: null,\n    created_at: null,\n    id: null,\n    increment_code: null,\n    last_move_at: null,\n    moves: null,\n    opening_eco: null,\n    opening_name: null,\n    opening_ply: null,\n    rated: null,\n    turns: null,\n    victory_status: null,\n    white_id: null,\n    white_rating: null,\n    winner: null\n  };\n\n  if (!game || game.id !== id) {\n    // Load the game info if we do not have it in store\n    fetchGame(id);\n    game = empty_game; // Render an empty game instead\n  }\n  const start_time = new Date(game.created_at);\n  const end_time = new Date(game.last_move_at);\n  const duration = (end_time - start_time) / 60000;\n\n  const isWinner = <font color=\"yellow\">winner</font>;\n\n  let move_list = !game.moves ? null : game.moves.split(\" \");\n  let newMoveList = [];\n\n  // Convert move_list to a readable format (e.g. [\"e4\", \"e5\"] => [\"1. e4 e5\"])\n  if (move_list) {\n    for (let i = 1; i * 2 - 1 < move_list.length; i++) {\n      newMoveList.push(\n        i.toString() + \". \" + move_list[i * 2 - 2] + \" \" + move_list[i * 2 - 1]\n      );\n    }\n    if (move_list.length % 2 === 1) {\n      newMoveList.push(\n        ((move_list.length + 1) / 2).toString() +\n          \". \" +\n          move_list[move_list.length - 1]\n      );\n    }\n  }\n\n  return (\n    <div className=\"gamepage\">\n      <header className=\"gamepage-header\">\n        <Link className=\"home\" to=\"/\">\n          <img src={search} className=\"search\" alt=\"white chess knight\" />\n        </Link>\n        <h2>Detailed Game Information</h2>\n      </header>\n      <section className=\"gamepage-section\">\n        <div className=\"gamepage-section-text\">\n          <p>\n            <b>White Player: </b>\n            {game.white_id} {game.winner === \"white\" ? isWinner : \"\"}\n          </p>\n          <p>\n            <b>Black Player: </b>\n            {game.black_id} {game.winner === \"black\" ? isWinner : \"\"}\n          </p>\n          <p>\n            <b>Date: </b>\n            {start_time.toLocaleDateString(\n              \"en-GB\"\n            ) /* To get dd-mm-yyyy format*/}\n          </p>\n          <p>\n            <b>Started at: </b>{\" \"}\n            {start_time.toLocaleTimeString(\"en-GB\", { hour12: false })}\n          </p>\n          <p>\n            <b>Ended at: </b>{\" \"}\n            {end_time.toLocaleTimeString(\"en-GB\", { hour12: false })}\n          </p>\n          <p>\n            <b>Duration: </b>\n            {Math.round(duration)} minutes\n          </p>\n          <p>\n            <b>Ratings: </b>\n            <font color=\"yellow\">{game.white_rating}</font>(white){\" \"}\n            <font color=\"yellow\">{game.black_rating}</font>\n            (black)\n          </p>\n          <p>\n            <b>Turns: </b>\n            {game.turns}\n          </p>\n          <p>\n            <b>Opening: </b>\n            <font color=\"yellow\">{game.opening_eco}</font> - {game.opening_name}\n          </p>\n          <p>\n            <b>Opening Plies: </b>\n            {game.opening_ply}\n          </p>\n          <p>\n            <b>Victory Status: </b>\n            {game.victory_status}\n          </p>\n        </div>\n\n        <div className=\"gamepage-section-moves\">\n          <div className=\"gamepage-section-moves-h\">\n            <b>Moves:</b>\n          </div>\n          <div className=\"gamepage-section-moves-t\">\n            {newMoveList.map((move, index) => {\n              return <div className=\"gamepage-section-moves-move\" key={index}>{move}</div>;\n            })}\n          </div>\n        </div>\n        <CommentBox id={id}/>\n      </section>\n      <footer className=\"gamepage-footer\"></footer>\n    </div>\n  );\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchGame: id => dispatch(fetchGame(id))\n  };\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    game: state.game.data,\n    match: ownProps.match\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GamePage);\n","import React from \"react\";\nimport \"./ErrorPage.css\";\nimport knight from \"../../media/search.svg\";\nimport { Link } from \"react-router-dom\";\n\n// 404 page\nfunction GamePageError() {\n  return (\n    <div className=\"error\">\n      <Link className=\"search\" to=\"/\">\n        <img src={knight} alt=\"white chess knight\" />\n      </Link>\n      <p className=\"error-p\">Page not found</p>\n    </div>\n  );\n}\nexport default GamePageError;\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SearchPage from \"./components/searchpage/SearchPage\";\nimport GamePage from \"./components/gamepage/GamePage\";\nimport ErrorPage from \"./components/errorpage/ErrorPage\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={SearchPage} />\n          <Route exact path=\"/game/:id\" component={GamePage} />\n          <Route component={ErrorPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport store from \"./store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}> {/* Redux provider that lets React access our store */}\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/search.aa327644.svg\";"],"sourceRoot":""}